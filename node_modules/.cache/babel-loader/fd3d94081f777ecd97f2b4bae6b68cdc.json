{"ast":null,"code":"var _jsxFileName = \"/Users/vladyslavafonin/Documents/Projects/Front-end/React/Marvel/src/components/charList/CharList.js\";\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './charList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CharList extends Component {\n  constructor(props) {\n    super(props);\n    this.marvelService = new MarvelService();\n\n    this.onRequest = offset => {\n      this.onCharListLoading();\n      this.marvelService.getAllCharacters(offset).then(this.onCharListLoaded).catch(this.onError);\n    };\n\n    this.onCharListLoading = () => {\n      this.setState({\n        newItemLoading: true\n      });\n    };\n\n    this.onCharListLoaded = newCharList => {\n      let ended = false;\n\n      if (newCharList.length < 9) {\n        ended = true;\n      }\n\n      this.setState(({\n        offset,\n        charList\n      }) => ({\n        charList: [...charList, ...newCharList],\n        loading: false,\n        newItemLoading: false,\n        offset: offset + 9,\n        charEnded: ended\n      }));\n    };\n\n    this.onError = () => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    this.addActiveClass = () => {\n      this.myRef.current.focus();\n    };\n\n    this.renderItems = data => {\n      const characters = data.map(item => {\n        let imgStyle = {\n          \"object-fit\": \"cover\"\n        };\n\n        if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n          imgStyle = {\n            \"object-fit\": \"unset\"\n          };\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          ref: this.myRef,\n          className: \"char__item\",\n          onClick: () => this.props.onCharSelected(item.id),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.thumbnail,\n            alt: item.name,\n            style: imgStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"char__name\",\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this);\n      });\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"char__grid\",\n        children: characters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      charList: [],\n      loading: true,\n      error: false,\n      newItemLoading: false,\n      offset: 210,\n      charEnded: false\n    };\n    this.myRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.onRequest();\n  }\n\n  render() {\n    const {\n      charList,\n      loading,\n      error,\n      newItemLoading,\n      offset,\n      charEnded\n    } = this.state;\n    const characters = this.renderItems(charList);\n    const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 38\n    }, this) : null;\n    const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 35\n    }, this) : null;\n    const content = !(loading || error) ? characters : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__list\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"char__grid\",\n        children: [errorMessage, spinner, content]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button button__main button__long\",\n        disabled: newItemLoading,\n        onClick: () => this.onRequest(offset),\n        style: {\n          \"display\": charEnded ? \"none\" : \"block\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner\",\n          children: \"load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n};\nexport default CharList;","map":{"version":3,"sources":["/Users/vladyslavafonin/Documents/Projects/Front-end/React/Marvel/src/components/charList/CharList.js"],"names":["React","Component","PropTypes","MarvelService","Spinner","ErrorMessage","CharList","constructor","props","marvelService","onRequest","offset","onCharListLoading","getAllCharacters","then","onCharListLoaded","catch","onError","setState","newItemLoading","newCharList","ended","length","charList","loading","charEnded","error","addActiveClass","myRef","current","focus","renderItems","data","characters","map","item","imgStyle","thumbnail","onCharSelected","id","name","state","createRef","componentDidMount","render","errorMessage","spinner","content","propTypes","func","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,iBAAP;;;AAEA,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAC7BM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AADc,SAalBC,aAbkB,GAaF,IAAIN,aAAJ,EAbE;;AAAA,SAmBlBO,SAnBkB,GAmBLC,MAAD,IAAY;AACpB,WAAKC,iBAAL;AACA,WAAKH,aAAL,CAAmBI,gBAAnB,CAAoCF,MAApC,EACKG,IADL,CACU,KAAKC,gBADf,EAEKC,KAFL,CAEW,KAAKC,OAFhB;AAGH,KAxBiB;;AAAA,SA0BlBL,iBA1BkB,GA0BE,MAAM;AACtB,WAAKM,QAAL,CAAc;AACVC,QAAAA,cAAc,EAAE;AADN,OAAd;AAGH,KA9BiB;;AAAA,SAgClBJ,gBAhCkB,GAgCEK,WAAD,IAAiB;AAChC,UAAIC,KAAK,GAAG,KAAZ;;AACA,UAAGD,WAAW,CAACE,MAAZ,GAAqB,CAAxB,EAA2B;AACvBD,QAAAA,KAAK,GAAG,IAAR;AACH;;AAED,WAAKH,QAAL,CAAc,CAAC;AAACP,QAAAA,MAAD;AAASY,QAAAA;AAAT,OAAD,MAAyB;AACnCA,QAAAA,QAAQ,EAAE,CAAC,GAAGA,QAAJ,EAAc,GAAGH,WAAjB,CADyB;AAEnCI,QAAAA,OAAO,EAAE,KAF0B;AAGnCL,QAAAA,cAAc,EAAE,KAHmB;AAInCR,QAAAA,MAAM,EAAEA,MAAM,GAAG,CAJkB;AAKnCc,QAAAA,SAAS,EAAEJ;AALwB,OAAzB,CAAd;AAOH,KA7CiB;;AAAA,SA+ClBJ,OA/CkB,GA+CR,MAAM;AACZ,WAAKC,QAAL,CAAc;AACVQ,QAAAA,KAAK,EAAE,IADG;AAEVF,QAAAA,OAAO,EAAE;AAFC,OAAd;AAIH,KApDiB;;AAAA,SAsDlBG,cAtDkB,GAsDD,MAAM;AACnB,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,KAAnB;AACH,KAxDiB;;AAAA,SA0DlBC,WA1DkB,GA0DHC,IAAD,IAAU;AACpB,YAAMC,UAAU,GAAGD,IAAI,CAACE,GAAL,CAASC,IAAI,IAAI;AAChC,YAAIC,QAAQ,GAAG;AAAC,wBAAc;AAAf,SAAf;;AACA,YAAGD,IAAI,CAACE,SAAL,KAAmB,qEAAtB,EAA6F;AACzFD,UAAAA,QAAQ,GAAG;AAAC,0BAAc;AAAf,WAAX;AACH;;AAED,4BACI;AAAI,UAAA,GAAG,EAAE,KAAKR,KAAd;AAAqB,UAAA,SAAS,EAAC,YAA/B;AAA0D,UAAA,OAAO,EAAE,MAAM,KAAKpB,KAAL,CAAW8B,cAAX,CAA0BH,IAAI,CAACI,EAA/B,CAAzE;AAAA,kCACI;AAAK,YAAA,GAAG,EAAEJ,IAAI,CAACE,SAAf;AAA0B,YAAA,GAAG,EAAEF,IAAI,CAACK,IAApC;AAA0C,YAAA,KAAK,EAAEJ;AAAjD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,sBAA6BD,IAAI,CAACK;AAAlC;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA,WAAiDL,IAAI,CAACI,EAAtD;AAAA;AAAA;AAAA;AAAA,gBADJ;AAMH,OAZkB,CAAnB;AAcA,0BACI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,kBACKN;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KA9EiB;;AAEd,SAAKQ,KAAL,GAAa;AACTlB,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,OAAO,EAAE,IAFA;AAGTE,MAAAA,KAAK,EAAE,KAHE;AAITP,MAAAA,cAAc,EAAE,KAJP;AAKTR,MAAAA,MAAM,EAAE,GALC;AAMTc,MAAAA,SAAS,EAAE;AANF,KAAb;AAQA,SAAKG,KAAL,gBAAa5B,KAAK,CAAC0C,SAAN,EAAb;AACH;;AAIDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKjC,SAAL;AACH;;AA+DDkC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACrB,MAAAA,QAAD;AAAWC,MAAAA,OAAX;AAAoBE,MAAAA,KAApB;AAA2BP,MAAAA,cAA3B;AAA2CR,MAAAA,MAA3C;AAAmDc,MAAAA;AAAnD,QAAgE,KAAKgB,KAA3E;AACA,UAAMR,UAAU,GAAG,KAAKF,WAAL,CAAiBR,QAAjB,CAAnB;AAEA,UAAMsB,YAAY,GAAGnB,KAAK,gBAAG,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAqB,IAA/C;AACA,UAAMoB,OAAO,GAAGtB,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAgB,IAAvC;AACA,UAAMuB,OAAO,GAAG,EAAEvB,OAAO,IAAIE,KAAb,IAAsBO,UAAtB,GAAmC,IAAnD;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,mBACKY,YADL,EAEKC,OAFL,EAGKC,OAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAQ,QAAA,SAAS,EAAC,kCAAlB;AACI,QAAA,QAAQ,EAAE5B,cADd;AAC8B,QAAA,OAAO,EAAE,MAAM,KAAKT,SAAL,CAAeC,MAAf,CAD7C;AAEI,QAAA,KAAK,EAAE;AAAC,qBAAWc,SAAS,GAAG,MAAH,GAAY;AAAjC,SAFX;AAAA,+BAGI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAvG4B;;AA0GjCnB,QAAQ,CAAC0C,SAAT,GAAqB;AACjBV,EAAAA,cAAc,EAAEpC,SAAS,CAAC+C,IAAV,CAAeC;AADd,CAArB;AAIA,eAAe5C,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nclass CharList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            charList: [],\n            loading: true, \n            error: false,\n            newItemLoading: false,\n            offset: 210,\n            charEnded: false\n        }\n        this.myRef = React.createRef();\n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.onRequest();\n    }\n\n    onRequest = (offset) => {\n        this.onCharListLoading();\n        this.marvelService.getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n            .catch(this.onError);\n    }\n\n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true\n        })\n    }\n\n    onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n        \n        this.setState(({offset, charList}) => ({\n            charList: [...charList, ...newCharList],\n            loading: false,\n            newItemLoading: false,\n            offset: offset + 9,\n            charEnded: ended\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    addActiveClass = () => {\n        this.myRef.current.focus();\n    }\n\n    renderItems = (data) => {\n        const characters = data.map(item => {\n            let imgStyle = {\"object-fit\": \"cover\"};\n            if(item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n                imgStyle = {\"object-fit\": \"unset\"};\n            }\n\n            return (\n                <li ref={this.myRef} className=\"char__item\" key={item.id} onClick={() => this.props.onCharSelected(item.id)}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                {characters}\n            </ul>\n        )\n    }\n\n    render(){\n        const {charList, loading, error, newItemLoading, offset, charEnded} = this.state;\n        const characters = this.renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? characters : null;\n\n        return (\n            <div className=\"char__list\">\n                <ul className=\"char__grid\">\n                    {errorMessage}\n                    {spinner}\n                    {content}\n                </ul>\n                <button className=\"button button__main button__long\" \n                    disabled={newItemLoading} onClick={() => this.onRequest(offset)}\n                    style={{\"display\": charEnded ? \"none\" : \"block\"}}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;"]},"metadata":{},"sourceType":"module"}